{
  "address": "0x15C8dCdEC7e7efe1F5Dc0865DcAfDfD458750B8B",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "marketId",
          "type": "uint256"
        }
      ],
      "name": "getMarketById",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "marketId",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "identifier",
              "type": "string"
            },
            {
              "internalType": "enum MarketType",
              "name": "marketType",
              "type": "uint8"
            },
            {
              "internalType": "bool",
              "name": "active",
              "type": "bool"
            },
            {
              "internalType": "string",
              "name": "baseCurrency",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "quoteCurrency",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            },
            {
              "internalType": "bytes32",
              "name": "muonPriceFeedId",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "fundingRateId",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "protocolFee",
              "type": "uint256"
            }
          ],
          "internalType": "struct Market",
          "name": "market",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "positionId",
          "type": "uint256"
        }
      ],
      "name": "getMarketFromPositionId",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "marketId",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "identifier",
              "type": "string"
            },
            {
              "internalType": "enum MarketType",
              "name": "marketType",
              "type": "uint8"
            },
            {
              "internalType": "bool",
              "name": "active",
              "type": "bool"
            },
            {
              "internalType": "string",
              "name": "baseCurrency",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "quoteCurrency",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            },
            {
              "internalType": "bytes32",
              "name": "muonPriceFeedId",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "fundingRateId",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "protocolFee",
              "type": "uint256"
            }
          ],
          "internalType": "struct Market",
          "name": "market",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "marketId",
          "type": "uint256"
        }
      ],
      "name": "getMarketProtocolFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMarkets",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "marketId",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "identifier",
              "type": "string"
            },
            {
              "internalType": "enum MarketType",
              "name": "marketType",
              "type": "uint8"
            },
            {
              "internalType": "bool",
              "name": "active",
              "type": "bool"
            },
            {
              "internalType": "string",
              "name": "baseCurrency",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "quoteCurrency",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            },
            {
              "internalType": "bytes32",
              "name": "muonPriceFeedId",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "fundingRateId",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "protocolFee",
              "type": "uint256"
            }
          ],
          "internalType": "struct Market[]",
          "name": "markets",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "marketIds",
          "type": "uint256[]"
        }
      ],
      "name": "getMarketsByIds",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "marketId",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "identifier",
              "type": "string"
            },
            {
              "internalType": "enum MarketType",
              "name": "marketType",
              "type": "uint8"
            },
            {
              "internalType": "bool",
              "name": "active",
              "type": "bool"
            },
            {
              "internalType": "string",
              "name": "baseCurrency",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "quoteCurrency",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            },
            {
              "internalType": "bytes32",
              "name": "muonPriceFeedId",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "fundingRateId",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "protocolFee",
              "type": "uint256"
            }
          ],
          "internalType": "struct Market[]",
          "name": "markets",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "positionIds",
          "type": "uint256[]"
        }
      ],
      "name": "getMarketsFromPositionIds",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "marketId",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "identifier",
              "type": "string"
            },
            {
              "internalType": "enum MarketType",
              "name": "marketType",
              "type": "uint8"
            },
            {
              "internalType": "bool",
              "name": "active",
              "type": "bool"
            },
            {
              "internalType": "string",
              "name": "baseCurrency",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "quoteCurrency",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            },
            {
              "internalType": "bytes32",
              "name": "muonPriceFeedId",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "fundingRateId",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "protocolFee",
              "type": "uint256"
            }
          ],
          "internalType": "struct Market[]",
          "name": "markets",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "end",
          "type": "uint256"
        }
      ],
      "name": "getMarketsInRange",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "marketId",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "identifier",
              "type": "string"
            },
            {
              "internalType": "enum MarketType",
              "name": "marketType",
              "type": "uint8"
            },
            {
              "internalType": "bool",
              "name": "active",
              "type": "bool"
            },
            {
              "internalType": "string",
              "name": "baseCurrency",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "quoteCurrency",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            },
            {
              "internalType": "bytes32",
              "name": "muonPriceFeedId",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "fundingRateId",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "protocolFee",
              "type": "uint256"
            }
          ],
          "internalType": "struct Market[]",
          "name": "markets",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMarketsLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "length",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "marketId",
          "type": "uint256"
        }
      ],
      "name": "isActiveMarket",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "marketId",
          "type": "uint256"
        }
      ],
      "name": "isValidMarketId",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x61b1f8d5d8489e83de9fee396d653a12e05799aee8b7d0e128f983a168c168c2",
  "receipt": {
    "to": null,
    "from": "0xeB73A6fB886c9e4C01F29da7B239e6E4Db0bf3aF",
    "contractAddress": "0x15C8dCdEC7e7efe1F5Dc0865DcAfDfD458750B8B",
    "transactionIndex": 1,
    "gasUsed": "4055008",
    "logsBloom": "0x
    "blockHash": "0xba3ae1ad3089020b864b53e15419d04c74d4fff474c1b34e8d0747d0ee617eab",
    "transactionHash": "0x61b1f8d5d8489e83de9fee396d653a12e05799aee8b7d0e128f983a168c168c2",
    "logs": [],
    "blockNumber": 52759640,
    "cumulativeGasUsed": "4055008",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "a81a9d46ae1752736f260cebd8193c8d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"}],\"name\":\"getMarketById\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"identifier\",\"type\":\"string\"},{\"internalType\":\"enum MarketType\",\"name\":\"marketType\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"baseCurrency\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"quoteCurrency\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"muonPriceFeedId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"fundingRateId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"protocolFee\",\"type\":\"uint256\"}],\"internalType\":\"struct Market\",\"name\":\"market\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"}],\"name\":\"getMarketFromPositionId\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"identifier\",\"type\":\"string\"},{\"internalType\":\"enum MarketType\",\"name\":\"marketType\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"baseCurrency\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"quoteCurrency\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"muonPriceFeedId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"fundingRateId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"protocolFee\",\"type\":\"uint256\"}],\"internalType\":\"struct Market\",\"name\":\"market\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"}],\"name\":\"getMarketProtocolFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMarkets\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"identifier\",\"type\":\"string\"},{\"internalType\":\"enum MarketType\",\"name\":\"marketType\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"baseCurrency\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"quoteCurrency\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"muonPriceFeedId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"fundingRateId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"protocolFee\",\"type\":\"uint256\"}],\"internalType\":\"struct Market[]\",\"name\":\"markets\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"marketIds\",\"type\":\"uint256[]\"}],\"name\":\"getMarketsByIds\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"identifier\",\"type\":\"string\"},{\"internalType\":\"enum MarketType\",\"name\":\"marketType\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"baseCurrency\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"quoteCurrency\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"muonPriceFeedId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"fundingRateId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"protocolFee\",\"type\":\"uint256\"}],\"internalType\":\"struct Market[]\",\"name\":\"markets\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"positionIds\",\"type\":\"uint256[]\"}],\"name\":\"getMarketsFromPositionIds\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"identifier\",\"type\":\"string\"},{\"internalType\":\"enum MarketType\",\"name\":\"marketType\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"baseCurrency\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"quoteCurrency\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"muonPriceFeedId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"fundingRateId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"protocolFee\",\"type\":\"uint256\"}],\"internalType\":\"struct Market[]\",\"name\":\"markets\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"getMarketsInRange\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"identifier\",\"type\":\"string\"},{\"internalType\":\"enum MarketType\",\"name\":\"marketType\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"baseCurrency\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"quoteCurrency\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"muonPriceFeedId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"fundingRateId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"protocolFee\",\"type\":\"uint256\"}],\"internalType\":\"struct Market[]\",\"name\":\"markets\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMarketsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"}],\"name\":\"isActiveMarket\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"}],\"name\":\"isValidMarketId\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/markets/Markets.sol\":\"Markets\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"contracts/constants/ConstantsInternal.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity ^0.8.16;\\r\\n\\r\\nimport { Decimal } from \\\"../libraries/LibDecimal.sol\\\";\\r\\nimport { ConstantsStorage } from \\\"./ConstantsStorage.sol\\\";\\r\\nimport { IConstantsEvents } from \\\"./IConstantsEvents.sol\\\";\\r\\n\\r\\nlibrary ConstantsInternal {\\r\\n    using ConstantsStorage for ConstantsStorage.Layout;\\r\\n    using Decimal for Decimal.D256;\\r\\n\\r\\n    uint256 private constant PERCENT_BASE = 1e18;\\r\\n    uint256 private constant PRECISION = 1e18;\\r\\n\\r\\n    /* ========== VIEWS ========== */\\r\\n\\r\\n    function getPrecision() internal pure returns (uint256) {\\r\\n        return PRECISION;\\r\\n    }\\r\\n\\r\\n    function getPercentBase() internal pure returns (uint256) {\\r\\n        return PERCENT_BASE;\\r\\n    }\\r\\n\\r\\n    function getCollateral() internal view returns (address) {\\r\\n        return ConstantsStorage.layout().collateral;\\r\\n    }\\r\\n\\r\\n    function getLiquidationFee() internal view returns (Decimal.D256 memory) {\\r\\n        return Decimal.ratio(ConstantsStorage.layout().liquidationFee, PERCENT_BASE);\\r\\n    }\\r\\n\\r\\n    function getProtocolLiquidationShare() internal view returns (Decimal.D256 memory) {\\r\\n        return Decimal.ratio(ConstantsStorage.layout().protocolLiquidationShare, PERCENT_BASE);\\r\\n    }\\r\\n\\r\\n    function getCVA() internal view returns (Decimal.D256 memory) {\\r\\n        return Decimal.ratio(ConstantsStorage.layout().cva, PERCENT_BASE);\\r\\n    }\\r\\n\\r\\n    function getRequestTimeout() internal view returns (uint256) {\\r\\n        return ConstantsStorage.layout().requestTimeout;\\r\\n    }\\r\\n\\r\\n    function getMaxOpenPositionsCross() internal view returns (uint256) {\\r\\n        return ConstantsStorage.layout().maxOpenPositionsCross;\\r\\n    }\\r\\n\\r\\n    /* ========== SETTERS ========== */\\r\\n\\r\\n    function setCollateral(address collateral) internal {\\r\\n        ConstantsStorage.layout().collateral = collateral;\\r\\n    }\\r\\n\\r\\n    function setLiquidationFee(uint256 liquidationFee) internal {\\r\\n        ConstantsStorage.layout().liquidationFee = liquidationFee;\\r\\n    }\\r\\n\\r\\n    function setProtocolLiquidationShare(uint256 protocolLiquidationShare) internal {\\r\\n        ConstantsStorage.layout().protocolLiquidationShare = protocolLiquidationShare;\\r\\n    }\\r\\n\\r\\n    function setCVA(uint256 cva) internal {\\r\\n        ConstantsStorage.layout().cva = cva;\\r\\n    }\\r\\n\\r\\n    function setRequestTimeout(uint256 requestTimeout) internal {\\r\\n        ConstantsStorage.layout().requestTimeout = requestTimeout;\\r\\n    }\\r\\n\\r\\n    function setMaxOpenPositionsCross(uint256 maxOpenPositionsCross) internal {\\r\\n        ConstantsStorage.layout().maxOpenPositionsCross = maxOpenPositionsCross;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x2cfd838c49a4c1e59f64b2a006ea74fbfcf98a376350bb0b1130150b9cee5806\",\"license\":\"BUSL-1.1\"},\"contracts/constants/ConstantsStorage.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity ^0.8.16;\\r\\n\\r\\nlibrary ConstantsStorage {\\r\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"diamond.standard.constants.storage\\\");\\r\\n\\r\\n    struct Layout {\\r\\n        address collateral;\\r\\n        uint256 liquidationFee;\\r\\n        uint256 protocolLiquidationShare;\\r\\n        uint256 cva;\\r\\n        uint256 requestTimeout;\\r\\n        uint256 maxOpenPositionsCross;\\r\\n    }\\r\\n\\r\\n    function layout() internal pure returns (Layout storage l) {\\r\\n        bytes32 slot = STORAGE_SLOT;\\r\\n        assembly {\\r\\n            l.slot := slot\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x95ca5941aa95afe59bee8f04990cb8bcb0eafb0e277a0f53fada8397e53c2baf\",\"license\":\"BUSL-1.1\"},\"contracts/constants/IConstantsEvents.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity ^0.8.16;\\r\\n\\r\\ninterface IConstantsEvents {\\r\\n    event SetCollateral(address oldAddress, address newAddress);\\r\\n    event SetLiquidationFee(uint256 oldFee, uint256 newFee);\\r\\n    event SetProtocolLiquidationShare(uint256 oldShare, uint256 newShare);\\r\\n    event SetCVA(uint256 oldCVA, uint256 newCVA);\\r\\n    event SetRequestTimeout(uint256 oldTimeout, uint256 newTimeout);\\r\\n    event SetMaxOpenPositionsCross(uint256 oldMax, uint256 newMax);\\r\\n}\\r\\n\",\"keccak256\":\"0x556ffdc7440aa7317b606497a3ada3e6e71faa64d2ad3da56fd8f6591b289745\",\"license\":\"BUSL-1.1\"},\"contracts/libraries/LibDecimal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.16;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Decimal\\r\\n * @author dYdX\\r\\n *\\r\\n * Library that defines a fixed-point number with 18 decimal places.\\r\\n */\\r\\nlibrary Decimal {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    // ============ Constants ============\\r\\n\\r\\n    uint256 constant BASE = 10 ** 18;\\r\\n\\r\\n    // ============ Structs ============\\r\\n\\r\\n    struct D256 {\\r\\n        uint256 value;\\r\\n    }\\r\\n\\r\\n    // ============ Static Functions ============\\r\\n\\r\\n    function zero() internal pure returns (D256 memory) {\\r\\n        return D256({ value: 0 });\\r\\n    }\\r\\n\\r\\n    function one() internal pure returns (D256 memory) {\\r\\n        return D256({ value: BASE });\\r\\n    }\\r\\n\\r\\n    function from(uint256 a) internal pure returns (D256 memory) {\\r\\n        return D256({ value: a.mul(BASE) });\\r\\n    }\\r\\n\\r\\n    function ratio(uint256 a, uint256 b) internal pure returns (D256 memory) {\\r\\n        return D256({ value: getPartial(a, BASE, b) });\\r\\n    }\\r\\n\\r\\n    // ============ Self Functions ============\\r\\n\\r\\n    function add(D256 memory self, uint256 b) internal pure returns (D256 memory) {\\r\\n        return D256({ value: self.value.add(b.mul(BASE)) });\\r\\n    }\\r\\n\\r\\n    function sub(D256 memory self, uint256 b) internal pure returns (D256 memory) {\\r\\n        return D256({ value: self.value.sub(b.mul(BASE)) });\\r\\n    }\\r\\n\\r\\n    function sub(D256 memory self, uint256 b, string memory reason) internal pure returns (D256 memory) {\\r\\n        return D256({ value: self.value.sub(b.mul(BASE), reason) });\\r\\n    }\\r\\n\\r\\n    function mul(D256 memory self, uint256 b) internal pure returns (D256 memory) {\\r\\n        return D256({ value: self.value.mul(b) });\\r\\n    }\\r\\n\\r\\n    function div(D256 memory self, uint256 b) internal pure returns (D256 memory) {\\r\\n        return D256({ value: self.value.div(b) });\\r\\n    }\\r\\n\\r\\n    function pow(D256 memory self, uint256 b) internal pure returns (D256 memory) {\\r\\n        if (b == 0) {\\r\\n            return one();\\r\\n        }\\r\\n\\r\\n        D256 memory temp = D256({ value: self.value });\\r\\n        for (uint256 i = 1; i < b; ++i) {\\r\\n            temp = mul(temp, self);\\r\\n        }\\r\\n\\r\\n        return temp;\\r\\n    }\\r\\n\\r\\n    function add(D256 memory self, D256 memory b) internal pure returns (D256 memory) {\\r\\n        return D256({ value: self.value.add(b.value) });\\r\\n    }\\r\\n\\r\\n    function sub(D256 memory self, D256 memory b) internal pure returns (D256 memory) {\\r\\n        return D256({ value: self.value.sub(b.value) });\\r\\n    }\\r\\n\\r\\n    function sub(D256 memory self, D256 memory b, string memory reason) internal pure returns (D256 memory) {\\r\\n        return D256({ value: self.value.sub(b.value, reason) });\\r\\n    }\\r\\n\\r\\n    function mul(D256 memory self, D256 memory b) internal pure returns (D256 memory) {\\r\\n        return D256({ value: getPartial(self.value, b.value, BASE) });\\r\\n    }\\r\\n\\r\\n    function div(D256 memory self, D256 memory b) internal pure returns (D256 memory) {\\r\\n        return D256({ value: getPartial(self.value, BASE, b.value) });\\r\\n    }\\r\\n\\r\\n    function equals(D256 memory self, D256 memory b) internal pure returns (bool) {\\r\\n        return self.value == b.value;\\r\\n    }\\r\\n\\r\\n    function greaterThan(D256 memory self, D256 memory b) internal pure returns (bool) {\\r\\n        return compareTo(self, b) == 2;\\r\\n    }\\r\\n\\r\\n    function lessThan(D256 memory self, D256 memory b) internal pure returns (bool) {\\r\\n        return compareTo(self, b) == 0;\\r\\n    }\\r\\n\\r\\n    function greaterThanOrEqualTo(D256 memory self, D256 memory b) internal pure returns (bool) {\\r\\n        return compareTo(self, b) > 0;\\r\\n    }\\r\\n\\r\\n    function lessThanOrEqualTo(D256 memory self, D256 memory b) internal pure returns (bool) {\\r\\n        return compareTo(self, b) < 2;\\r\\n    }\\r\\n\\r\\n    function isZero(D256 memory self) internal pure returns (bool) {\\r\\n        return self.value == 0;\\r\\n    }\\r\\n\\r\\n    function asUint256(D256 memory self) internal pure returns (uint256) {\\r\\n        return self.value.div(BASE);\\r\\n    }\\r\\n\\r\\n    // ============ Core Methods ============\\r\\n\\r\\n    function getPartial(uint256 target, uint256 numerator, uint256 denominator) private pure returns (uint256) {\\r\\n        return target.mul(numerator).div(denominator);\\r\\n    }\\r\\n\\r\\n    function compareTo(D256 memory a, D256 memory b) private pure returns (uint256) {\\r\\n        if (a.value == b.value) {\\r\\n            return 1;\\r\\n        }\\r\\n        return a.value > b.value ? 2 : 0;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xfa323074357185fffcd95c964c95e25fbba23f2ac0fd542ea23333721457f3d5\",\"license\":\"MIT\"},\"contracts/libraries/LibEnums.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity ^0.8.16;\\r\\n\\r\\nenum MarketType {\\r\\n    FOREX,\\r\\n    METALS,\\r\\n    ENERGIES,\\r\\n    INDICES,\\r\\n    STOCKS,\\r\\n    COMMODITIES,\\r\\n    BONDS,\\r\\n    ETFS,\\r\\n    CRYPTO\\r\\n}\\r\\n\\r\\nenum Side {\\r\\n    BUY,\\r\\n    SELL\\r\\n}\\r\\n\\r\\nenum HedgerMode {\\r\\n    SINGLE,\\r\\n    HYBRID,\\r\\n    AUTO\\r\\n}\\r\\n\\r\\nenum OrderType {\\r\\n    LIMIT,\\r\\n    MARKET\\r\\n}\\r\\n\\r\\nenum PositionType {\\r\\n    ISOLATED,\\r\\n    CROSS\\r\\n}\\r\\n\",\"keccak256\":\"0xbedbd913c1366fd4d16201404d7cc37f9e662311ff71e9fff1cd1003ef91f03f\",\"license\":\"BUSL-1.1\"},\"contracts/markets/Markets.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity ^0.8.16;\\r\\n\\r\\nimport { MarketsInternal } from \\\"./MarketsInternal.sol\\\";\\r\\nimport { Market } from \\\"./MarketsStorage.sol\\\";\\r\\n\\r\\ncontract Markets {\\r\\n    function getMarkets() external view returns (Market[] memory markets) {\\r\\n        return MarketsInternal.getMarkets();\\r\\n    }\\r\\n\\r\\n    function getMarketById(uint256 marketId) external view returns (Market memory market) {\\r\\n        return MarketsInternal.getMarketById(marketId);\\r\\n    }\\r\\n\\r\\n    function getMarketsByIds(uint256[] memory marketIds) external view returns (Market[] memory markets) {\\r\\n        return MarketsInternal.getMarketsByIds(marketIds);\\r\\n    }\\r\\n\\r\\n    function getMarketsInRange(uint256 start, uint256 end) external view returns (Market[] memory markets) {\\r\\n        return MarketsInternal.getMarketsInRange(start, end);\\r\\n    }\\r\\n\\r\\n    function getMarketsLength() external view returns (uint256 length) {\\r\\n        return MarketsInternal.getMarketsLength();\\r\\n    }\\r\\n\\r\\n    function getMarketFromPositionId(uint256 positionId) external view returns (Market memory market) {\\r\\n        return MarketsInternal.getMarketFromPositionId(positionId);\\r\\n    }\\r\\n\\r\\n    function getMarketsFromPositionIds(uint256[] calldata positionIds) external view returns (Market[] memory markets) {\\r\\n        return MarketsInternal.getMarketsFromPositionIds(positionIds);\\r\\n    }\\r\\n\\r\\n    function getMarketProtocolFee(uint256 marketId) external view returns (uint256) {\\r\\n        return MarketsInternal.getMarketProtocolFee(marketId).value;\\r\\n    }\\r\\n\\r\\n    function isValidMarketId(uint256 marketId) external pure returns (bool) {\\r\\n        return MarketsInternal.isValidMarketId(marketId);\\r\\n    }\\r\\n\\r\\n    function isActiveMarket(uint256 marketId) external view returns (bool) {\\r\\n        return MarketsInternal.isActiveMarket(marketId);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x8146214d89bc1e250c84a793adea0a9cc39a9c399ba248ddb90d2354419b01b4\",\"license\":\"BUSL-1.1\"},\"contracts/markets/MarketsInternal.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity ^0.8.16;\\r\\n\\r\\nimport { Decimal } from \\\"../libraries/LibDecimal.sol\\\";\\r\\nimport { ConstantsInternal } from \\\"../constants/ConstantsInternal.sol\\\";\\r\\nimport { MarketsStorage, Market } from \\\"./MarketsStorage.sol\\\";\\r\\nimport { MasterStorage } from \\\"../master-agreement/MasterStorage.sol\\\";\\r\\n\\r\\nlibrary MarketsInternal {\\r\\n    using MarketsStorage for MarketsStorage.Layout;\\r\\n    using MasterStorage for MasterStorage.Layout;\\r\\n    using Decimal for Decimal.D256;\\r\\n\\r\\n    /* ========== VIEWS ========== */\\r\\n\\r\\n    function getMarkets() internal view returns (Market[] memory markets) {\\r\\n        return getMarketsInRange(1, MarketsStorage.layout().marketList.length);\\r\\n    }\\r\\n\\r\\n    function getMarketById(uint256 marketId) internal view returns (Market memory market) {\\r\\n        return MarketsStorage.layout().marketMap[marketId];\\r\\n    }\\r\\n\\r\\n    function getMarketsByIds(uint256[] memory marketIds) internal view returns (Market[] memory markets) {\\r\\n        markets = new Market[](marketIds.length);\\r\\n        for (uint256 i = 0; i < marketIds.length; i++) {\\r\\n            markets[i] = MarketsStorage.layout().marketMap[marketIds[i]];\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getMarketsInRange(uint256 start, uint256 end) internal view returns (Market[] memory markets) {\\r\\n        uint256 length = end - start + 1;\\r\\n        markets = new Market[](length);\\r\\n\\r\\n        for (uint256 i = 0; i < length; i++) {\\r\\n            markets[i] = MarketsStorage.layout().marketMap[start + i];\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getMarketsLength() internal view returns (uint256 length) {\\r\\n        return MarketsStorage.layout().marketList.length;\\r\\n    }\\r\\n\\r\\n    function getMarketFromPositionId(uint256 positionId) internal view returns (Market memory market) {\\r\\n        uint256 marketId = MasterStorage.layout().allPositionsMap[positionId].marketId;\\r\\n        market = MarketsStorage.layout().marketMap[marketId];\\r\\n    }\\r\\n\\r\\n    function getMarketsFromPositionIds(uint256[] calldata positionIds) internal view returns (Market[] memory markets) {\\r\\n        markets = new Market[](positionIds.length);\\r\\n        for (uint256 i = 0; i < positionIds.length; i++) {\\r\\n            uint256 marketId = MasterStorage.layout().allPositionsMap[positionIds[i]].marketId;\\r\\n            markets[i] = MarketsStorage.layout().marketMap[marketId];\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getMarketProtocolFee(uint256 marketId) internal view returns (Decimal.D256 memory) {\\r\\n        uint256 fee = MarketsStorage.layout().marketMap[marketId].protocolFee;\\r\\n        return Decimal.ratio(fee, ConstantsInternal.getPercentBase());\\r\\n    }\\r\\n\\r\\n    function isValidMarketId(uint256 marketId) internal pure returns (bool) {\\r\\n        return marketId > 0;\\r\\n    }\\r\\n\\r\\n    function isActiveMarket(uint256 marketId) internal view returns (bool) {\\r\\n        return MarketsStorage.layout().marketMap[marketId].active;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x47d4e83f68f13196c3987c88e243eaa02acf99fc6846824139de84eefd92d986\",\"license\":\"BUSL-1.1\"},\"contracts/markets/MarketsStorage.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity ^0.8.16;\\r\\n\\r\\nimport { MarketType } from \\\"../libraries/LibEnums.sol\\\";\\r\\n\\r\\nstruct Market {\\r\\n    uint256 marketId;\\r\\n    string identifier;\\r\\n    MarketType marketType;\\r\\n    bool active;\\r\\n    string baseCurrency;\\r\\n    string quoteCurrency;\\r\\n    string symbol;\\r\\n    bytes32 muonPriceFeedId;\\r\\n    bytes32 fundingRateId;\\r\\n    uint256 protocolFee;\\r\\n}\\r\\n\\r\\nlibrary MarketsStorage {\\r\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"diamond.standard.markets.storage\\\");\\r\\n\\r\\n    struct Layout {\\r\\n        mapping(uint256 => Market) marketMap;\\r\\n        Market[] marketList;\\r\\n    }\\r\\n\\r\\n    function layout() internal pure returns (Layout storage l) {\\r\\n        bytes32 slot = STORAGE_SLOT;\\r\\n        assembly {\\r\\n            l.slot := slot\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x5e360238be1f82158114f4077a304abfdf950831638affa193270da06daad288\",\"license\":\"BUSL-1.1\"},\"contracts/master-agreement/MasterStorage.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity ^0.8.16;\\r\\n\\r\\nimport { PositionType, OrderType, HedgerMode, Side } from \\\"../libraries/LibEnums.sol\\\";\\r\\n\\r\\nenum RequestForQuoteState {\\r\\n    NEW,\\r\\n    CANCELED,\\r\\n    ACCEPTED\\r\\n}\\r\\n\\r\\nenum PositionState {\\r\\n    OPEN,\\r\\n    MARKET_CLOSE_REQUESTED,\\r\\n    LIMIT_CLOSE_REQUESTED,\\r\\n    LIMIT_CLOSE_ACTIVE,\\r\\n    CLOSED,\\r\\n    LIQUIDATED\\r\\n    // TODO: add cancel limit close\\r\\n}\\r\\n\\r\\nstruct RequestForQuote {\\r\\n    uint256 creationTimestamp;\\r\\n    uint256 mutableTimestamp;\\r\\n    uint256 rfqId;\\r\\n    RequestForQuoteState state;\\r\\n    PositionType positionType;\\r\\n    OrderType orderType;\\r\\n    address partyA;\\r\\n    address partyB;\\r\\n    HedgerMode hedgerMode;\\r\\n    uint256 marketId;\\r\\n    Side side;\\r\\n    uint256 notionalUsd;\\r\\n    uint256 lockedMarginA;\\r\\n    uint256 protocolFee;\\r\\n    uint256 liquidationFee;\\r\\n    uint256 cva;\\r\\n    uint256 minExpectedUnits;\\r\\n    uint256 maxExpectedUnits;\\r\\n    address affiliate;\\r\\n}\\r\\n\\r\\nstruct Position {\\r\\n    uint256 creationTimestamp;\\r\\n    uint256 mutableTimestamp;\\r\\n    uint256 positionId;\\r\\n    bytes16 uuid;\\r\\n    PositionState state;\\r\\n    PositionType positionType;\\r\\n    uint256 marketId;\\r\\n    address partyA;\\r\\n    address partyB;\\r\\n    Side side;\\r\\n    uint256 lockedMarginA;\\r\\n    uint256 lockedMarginB;\\r\\n    uint256 protocolFeePaid;\\r\\n    uint256 liquidationFee;\\r\\n    uint256 cva;\\r\\n    uint256 currentBalanceUnits;\\r\\n    uint256 initialNotionalUsd;\\r\\n    address affiliate;\\r\\n}\\r\\n\\r\\nlibrary MasterStorage {\\r\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"diamond.standard.master.agreement.storage\\\");\\r\\n\\r\\n    struct Layout {\\r\\n        // Balances\\r\\n        mapping(address => uint256) accountBalances;\\r\\n        mapping(address => uint256) marginBalances;\\r\\n        mapping(address => uint256) crossLockedMargin;\\r\\n        mapping(address => uint256) crossLockedMarginReserved;\\r\\n        // RequestForQuotes\\r\\n        mapping(uint256 => RequestForQuote) requestForQuotesMap;\\r\\n        uint256 requestForQuotesLength;\\r\\n        mapping(address => uint256) crossRequestForQuotesLength;\\r\\n        // Positions\\r\\n        mapping(uint256 => Position) allPositionsMap;\\r\\n        uint256 allPositionsLength;\\r\\n        mapping(address => uint256) openPositionsIsolatedLength;\\r\\n        mapping(address => uint256) openPositionsCrossLength;\\r\\n    }\\r\\n\\r\\n    function layout() internal pure returns (Layout storage l) {\\r\\n        bytes32 slot = STORAGE_SLOT;\\r\\n        assembly {\\r\\n            l.slot := slot\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xf3ffeca951069c7c89d5b812e494a8a05d774bb7e76764975855335b9655c283\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x6080806040523461001657610d9f908161001c8239f35b600080fdfe60806040908082526004918236101561001757600080fd5b60009160e0908335821c9081630d64cdbd14610991575080632a6969fc146108305780633df1c4101461079d57806344c70b851461067357806355e27ecf146106525780636e048ae9146104c557806392ef292c14610483578063a239675314610383578063dae87fba146102115763ec2c90161461009557600080fd5b3461020d578260031936011261020d577f35cc72510b152d9944ca07ae5bfb481ff4b7afbbbd870172068c721dd022931f5490816000198101116101fa576100dc82610cd3565b93805b8381106100f7578451806100f38882610b50565b0390f35b60018181018082116101e75783526020600080516020610d7383398151915281528684209061013688519361012b856109cf565b835485528301610c02565b9083015260028101549060ff80831660098110156101d45789850152600892831c16151560608401526101cf9392919061017260038201610c02565b60808401526101828b8201610c02565b60a084015261019360058201610c02565b60c0840152600681015487840152600781015461010084015201546101208201526101be8289610d48565b526101c98188610d48565b50610d23565b6100df565b634e487b7160e01b875260218c52602487fd5b634e487b7160e01b845260118952602484fd5b634e487b7160e01b845260118552602484fd5b8280fd5b5083903461037f578260031936011261037f5781359360249182359386850394851161036e5760019384860180961161035d5761024d86610cd3565b97845b878110610264578851806100f38c82610b50565b80820180831161034b5786526020600080516020610d7383398151915281528987208a5191610292836109cf565b815483526102a18a8301610c02565b9083015260028101549060ff8083166009811015610339578d850152600892831c1615156060840152610334939291906102dd60038201610c02565b60808401526102ed888201610c02565b60a08401526102fe60058201610c02565b60c084015260068101548984015260078101546101008401520154610120820152610329828d610d48565b526101c9818c610d48565b610250565b634e487b7160e01b8b5260218952878bfd5b634e487b7160e01b8752601185528387fd5b634e487b7160e01b84526011825283fd5b634e487b7160e01b83526011905250fd5b8380fd5b503461020d57602036600319011261020d5761039d610bb2565b506103a6610bb2565b5083358352600080516020610d73833981519152602052818320908251936103cd856109cf565b825485526103dd60018401610c02565b602086015260028301549060ff821690600982101561047057506100f39660ff600895949361042c93888a0152861c161515606088015261042060038501610c02565b60808801528301610c02565b60a086015261043d60058301610c02565b60c08601526006820154908501526007810154610100850152015461012083015251918291602083526020830190610a98565b634e487b7160e01b815260218852602490fd5b5050346104c157816003193601126104c1576020907f35cc72510b152d9944ca07ae5bfb481ff4b7afbbbd870172068c721dd022931f549051908152f35b5080fd5b509290913461064f576020908160031936011261064f5782359467ffffffffffffffff9384871161020d573660238801121561020d578681013594851161020d5760059060243687841b8a0182011161064b5761052187610cd3565b98855b888110610538578951806100f38d82610b50565b8281861b8301013587527fdfc6b7cb23f07b62775a228b58db9a36de27f3d727948dc10389611c6fd106458852838a882001548752600080516020610d7383398151915288528987208a519061058d826109cf565b8054825261059d60018201610c02565b8a83015260028101549060ff8083166009811015610639578f90938f9387969593610634989461062996880152600892831c16151560608701526105e360038201610c02565b60808701526105f38b8201610c02565b60a08701526106038c8201610c02565b60c087015260068101548d87015260078101546101008701520154610120850152610d48565b526101c9818d610d48565b610524565b634e487b7160e01b8c5260218952878cfd5b8480fd5b80fd5b8385843461020d57602036600319011261020d576020925051903515158152f35b50903461020d576020918260031936011261037f57610690610bb2565b50610699610bb2565b50843584527fdfc6b7cb23f07b62775a228b58db9a36de27f3d727948dc10389611c6fd1064583528482852001548452600080516020610d738339815191528352818420908251946106ea866109cf565b825486526106fa60018401610c02565b8587015260028301549060ff821690600982101561078a5750916107498860ff8796946008966100f3998c0152861c16151560608a015261073d60038501610c02565b60808a01528301610c02565b60a088015261075a60058301610c02565b60c08801526006820154908701526007810154610100870152015461012085015251928284938452830190610a98565b634e487b7160e01b815260218952602490fd5b5050903461064f57602036600319011261064f578082516107bd81610a02565b5282358152600080516020610d73833981519152602052600882822001548183516107e781610a02565b52670de0b6b3a764000091816000190483118215151661081d5760208484808502049081815161081681610a02565b5251908152f35b634e487b7160e01b815260118552602490fd5b50929190346104c1576020918260031936011261064f5783359467ffffffffffffffff86116104c157366023870112156104c1578585013561087181610a40565b9561087e85519788610a1e565b8187528587019760249889600594851b8301019136831161098d578a899101915b83831061097d57505050506108b48751610cd3565b97845b8851811015610970576108ca818a610d48565b518652600080516020610d7383398151915288528686208751906108ed826109cf565b805482526108fd60018201610c02565b8a83015260028101549060ff808316600981101561095e578b850152600892831c16151560608401526109599392919061093960038201610c02565b6080840152610949878201610c02565b60a08401526102fe888201610c02565b6108b7565b634e487b7160e01b8b5260218852868bfd5b8651806100f38c82610b50565b823581529181019189910161089f565b8680fd5b849084873461037f57602036600319011261037f57358352600080516020610d73833981519152602090815292206002015460081c60ff1615158152f35b610140810190811067ffffffffffffffff8211176109ec57604052565b634e487b7160e01b600052604160045260246000fd5b6020810190811067ffffffffffffffff8211176109ec57604052565b90601f8019910116810190811067ffffffffffffffff8211176109ec57604052565b67ffffffffffffffff81116109ec5760051b60200190565b919082519283825260005b848110610a84575050826000602080949584010152601f8019910116010190565b602081830181015184830182015201610a63565b9081518152610ab66020830151610140806020850152830190610a58565b6040830151906009821015610b3a57610af3610b0591610b1793604086015260608601511515606086015260808601518582036080870152610a58565b60a085015184820360a0860152610a58565b60c084015183820360c0850152610a58565b9160e081015160e083015261010080820151908301526101208091015191015290565b634e487b7160e01b600052602160045260246000fd5b602080820190808352835180925260408301928160408460051b8301019501936000915b848310610b845750505050505090565b9091929394958480610ba2600193603f198682030187528a51610a98565b9801930193019194939290610b74565b60405190610bbf826109cf565b816101206000918281526060602082015282604082015282606082015260606080820152606060a0820152606060c08201528260e0820152826101008201520152565b90604051906000835490600182811c90808416968715610cc9575b6020948584108914610cb55787988489979899529081600014610c935750600114610c54575b505050610c5292500383610a1e565b565b600090815285812095935091905b818310610c7b575050610c529350820101388080610c43565b85548884018501529485019487945091830191610c62565b92505050610c5294925060ff191682840152151560051b820101388080610c43565b634e487b7160e01b85526022600452602485fd5b91607f1691610c1d565b90610cdd82610a40565b610cea6040519182610a1e565b8281528092610cfb601f1991610a40565b019060005b828110610d0c57505050565b602090610d17610bb2565b82828501015201610d00565b6000198114610d325760010190565b634e487b7160e01b600052601160045260246000fd5b8051821015610d5c5760209160051b010190565b634e487b7160e01b600052603260045260246000fdfe35cc72510b152d9944ca07ae5bfb481ff4b7afbbbd870172068c721dd022931ea164736f6c6343000810000a",
  "deployedBytecode": "0x60806040908082526004918236101561001757600080fd5b60009160e0908335821c9081630d64cdbd14610991575080632a6969fc146108305780633df1c4101461079d57806344c70b851461067357806355e27ecf146106525780636e048ae9146104c557806392ef292c14610483578063a239675314610383578063dae87fba146102115763ec2c90161461009557600080fd5b3461020d578260031936011261020d577f35cc72510b152d9944ca07ae5bfb481ff4b7afbbbd870172068c721dd022931f5490816000198101116101fa576100dc82610cd3565b93805b8381106100f7578451806100f38882610b50565b0390f35b60018181018082116101e75783526020600080516020610d7383398151915281528684209061013688519361012b856109cf565b835485528301610c02565b9083015260028101549060ff80831660098110156101d45789850152600892831c16151560608401526101cf9392919061017260038201610c02565b60808401526101828b8201610c02565b60a084015261019360058201610c02565b60c0840152600681015487840152600781015461010084015201546101208201526101be8289610d48565b526101c98188610d48565b50610d23565b6100df565b634e487b7160e01b875260218c52602487fd5b634e487b7160e01b845260118952602484fd5b634e487b7160e01b845260118552602484fd5b8280fd5b5083903461037f578260031936011261037f5781359360249182359386850394851161036e5760019384860180961161035d5761024d86610cd3565b97845b878110610264578851806100f38c82610b50565b80820180831161034b5786526020600080516020610d7383398151915281528987208a5191610292836109cf565b815483526102a18a8301610c02565b9083015260028101549060ff8083166009811015610339578d850152600892831c1615156060840152610334939291906102dd60038201610c02565b60808401526102ed888201610c02565b60a08401526102fe60058201610c02565b60c084015260068101548984015260078101546101008401520154610120820152610329828d610d48565b526101c9818c610d48565b610250565b634e487b7160e01b8b5260218952878bfd5b634e487b7160e01b8752601185528387fd5b634e487b7160e01b84526011825283fd5b634e487b7160e01b83526011905250fd5b8380fd5b503461020d57602036600319011261020d5761039d610bb2565b506103a6610bb2565b5083358352600080516020610d73833981519152602052818320908251936103cd856109cf565b825485526103dd60018401610c02565b602086015260028301549060ff821690600982101561047057506100f39660ff600895949361042c93888a0152861c161515606088015261042060038501610c02565b60808801528301610c02565b60a086015261043d60058301610c02565b60c08601526006820154908501526007810154610100850152015461012083015251918291602083526020830190610a98565b634e487b7160e01b815260218852602490fd5b5050346104c157816003193601126104c1576020907f35cc72510b152d9944ca07ae5bfb481ff4b7afbbbd870172068c721dd022931f549051908152f35b5080fd5b509290913461064f576020908160031936011261064f5782359467ffffffffffffffff9384871161020d573660238801121561020d578681013594851161020d5760059060243687841b8a0182011161064b5761052187610cd3565b98855b888110610538578951806100f38d82610b50565b8281861b8301013587527fdfc6b7cb23f07b62775a228b58db9a36de27f3d727948dc10389611c6fd106458852838a882001548752600080516020610d7383398151915288528987208a519061058d826109cf565b8054825261059d60018201610c02565b8a83015260028101549060ff8083166009811015610639578f90938f9387969593610634989461062996880152600892831c16151560608701526105e360038201610c02565b60808701526105f38b8201610c02565b60a08701526106038c8201610c02565b60c087015260068101548d87015260078101546101008701520154610120850152610d48565b526101c9818d610d48565b610524565b634e487b7160e01b8c5260218952878cfd5b8480fd5b80fd5b8385843461020d57602036600319011261020d576020925051903515158152f35b50903461020d576020918260031936011261037f57610690610bb2565b50610699610bb2565b50843584527fdfc6b7cb23f07b62775a228b58db9a36de27f3d727948dc10389611c6fd1064583528482852001548452600080516020610d738339815191528352818420908251946106ea866109cf565b825486526106fa60018401610c02565b8587015260028301549060ff821690600982101561078a5750916107498860ff8796946008966100f3998c0152861c16151560608a015261073d60038501610c02565b60808a01528301610c02565b60a088015261075a60058301610c02565b60c08801526006820154908701526007810154610100870152015461012085015251928284938452830190610a98565b634e487b7160e01b815260218952602490fd5b5050903461064f57602036600319011261064f578082516107bd81610a02565b5282358152600080516020610d73833981519152602052600882822001548183516107e781610a02565b52670de0b6b3a764000091816000190483118215151661081d5760208484808502049081815161081681610a02565b5251908152f35b634e487b7160e01b815260118552602490fd5b50929190346104c1576020918260031936011261064f5783359467ffffffffffffffff86116104c157366023870112156104c1578585013561087181610a40565b9561087e85519788610a1e565b8187528587019760249889600594851b8301019136831161098d578a899101915b83831061097d57505050506108b48751610cd3565b97845b8851811015610970576108ca818a610d48565b518652600080516020610d7383398151915288528686208751906108ed826109cf565b805482526108fd60018201610c02565b8a83015260028101549060ff808316600981101561095e578b850152600892831c16151560608401526109599392919061093960038201610c02565b6080840152610949878201610c02565b60a08401526102fe888201610c02565b6108b7565b634e487b7160e01b8b5260218852868bfd5b8651806100f38c82610b50565b823581529181019189910161089f565b8680fd5b849084873461037f57602036600319011261037f57358352600080516020610d73833981519152602090815292206002015460081c60ff1615158152f35b610140810190811067ffffffffffffffff8211176109ec57604052565b634e487b7160e01b600052604160045260246000fd5b6020810190811067ffffffffffffffff8211176109ec57604052565b90601f8019910116810190811067ffffffffffffffff8211176109ec57604052565b67ffffffffffffffff81116109ec5760051b60200190565b919082519283825260005b848110610a84575050826000602080949584010152601f8019910116010190565b602081830181015184830182015201610a63565b9081518152610ab66020830151610140806020850152830190610a58565b6040830151906009821015610b3a57610af3610b0591610b1793604086015260608601511515606086015260808601518582036080870152610a58565b60a085015184820360a0860152610a58565b60c084015183820360c0850152610a58565b9160e081015160e083015261010080820151908301526101208091015191015290565b634e487b7160e01b600052602160045260246000fd5b602080820190808352835180925260408301928160408460051b8301019501936000915b848310610b845750505050505090565b9091929394958480610ba2600193603f198682030187528a51610a98565b9801930193019194939290610b74565b60405190610bbf826109cf565b816101206000918281526060602082015282604082015282606082015260606080820152606060a0820152606060c08201528260e0820152826101008201520152565b90604051906000835490600182811c90808416968715610cc9575b6020948584108914610cb55787988489979899529081600014610c935750600114610c54575b505050610c5292500383610a1e565b565b600090815285812095935091905b818310610c7b575050610c529350820101388080610c43565b85548884018501529485019487945091830191610c62565b92505050610c5294925060ff191682840152151560051b820101388080610c43565b634e487b7160e01b85526022600452602485fd5b91607f1691610c1d565b90610cdd82610a40565b610cea6040519182610a1e565b8281528092610cfb601f1991610a40565b019060005b828110610d0c57505050565b602090610d17610bb2565b82828501015201610d00565b6000198114610d325760010190565b634e487b7160e01b600052601160045260246000fd5b8051821015610d5c5760209160051b010190565b634e487b7160e01b600052603260045260246000fdfe35cc72510b152d9944ca07ae5bfb481ff4b7afbbbd870172068c721dd022931ea164736f6c6343000810000a",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}
